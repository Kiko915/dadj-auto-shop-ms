<script setup lang="ts">
import { computed, ref, watch, onMounted } from 'vue'
import { RouterLink, useRouter } from 'vue-router'
import { Search, Star, Plus, ChevronLeft, ChevronRight, Users, TrendingUp, Car, Trash2, X, AlertTriangle } from 'lucide-vue-next'
import { Button } from '@/components/ui/button'
import { Input } from '@/components/ui/input'
import { Badge } from '@/components/ui/badge'
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'
import { Skeleton } from '@/components/ui/skeleton'
import { Checkbox } from '@/components/ui/checkbox'
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
} from '@/components/ui/dialog'
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow
} from '@/components/ui/table'
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue
} from '@/components/ui/select'
import { getCustomers, deleteCustomer } from '@/api/customers'
import { toast } from 'vue-sonner'

type Customer = {
  id: string
  firstName: string
  lastName: string
  middleName?: string | null
  suffix?: string | null
  phoneNumber: string
  email: string
  profilePicture?: string | null
  loyaltyStatus: 'Loyal' | 'Regular' | 'VIP'
  totalVehicles: number
}

const router = useRouter()
const customers = ref<Customer[]>([])
const selectedCustomerIds = ref<string[]>([])

const searchQuery = ref('')
const debouncedSearchQuery = ref('')
const sortOrder = ref<'asc' | 'desc'>('asc')
const loyaltyFilter = ref<'all' | 'Loyal' | 'Regular' | 'VIP'>('all')
const currentPage = ref(1)
const itemsPerPage = ref(10)
const isLoading = ref(true)

// Delete dialog state
const showDeleteDialog = ref(false)
const isDeleting = ref(false)

// Debounce search input
let debounceTimeout: ReturnType<typeof setTimeout>
watch(searchQuery, (newValue) => {
  clearTimeout(debounceTimeout)
  debounceTimeout = setTimeout(() => {
    debouncedSearchQuery.value = newValue
    currentPage.value = 1 // Reset to first page on search
  }, 300)
})

// Reset pagination when sort order changes
watch(sortOrder, () => {
  currentPage.value = 1
})

// Reset pagination when loyalty filter changes
watch(loyaltyFilter, () => {
  currentPage.value = 1
})

// Reset pagination when items per page changes
watch(itemsPerPage, () => {
  currentPage.value = 1
})

// Fetch customers from API
const fetchCustomers = async () => {
  isLoading.value = true
  try {
    const response = await getCustomers()
    customers.value = response.customers || []
  } catch (error: any) {
    console.error('Failed to fetch customers:', error)
    toast.error('Failed to Load Customers', {
      description: error.response?.data?.message || 'Failed to load customers. Please try again.'
    })
    customers.value = []
  } finally {
    isLoading.value = false
  }
}

// Fetch customers on mount
onMounted(() => {
  fetchCustomers()
})

const filteredCustomers = computed(() => {
  const query = debouncedSearchQuery.value.trim().toLowerCase()

  const filtered = customers.value.filter((customer) => {
    // Apply loyalty filter
    if (loyaltyFilter.value !== 'all' && customer.loyaltyStatus !== loyaltyFilter.value) {
      return false
    }

    // Apply search filter
    if (!query) return true
    
    const fullName = `${customer.firstName} ${customer.middleName || ''} ${customer.lastName} ${customer.suffix || ''}`.trim()
    const haystack = [
      customer.id,
      fullName,
      customer.firstName,
      customer.lastName,
      customer.middleName,
      customer.suffix,
      customer.phoneNumber,
      customer.email,
      customer.loyaltyStatus,
      String(customer.totalVehicles)
    ]
      .filter(Boolean)
      .join(' ')
      .toLowerCase()

    return haystack.includes(query)
  })

  return [...filtered].sort((a, b) => {
    const nameA = `${a.firstName} ${a.lastName}`.toLowerCase()
    const nameB = `${b.firstName} ${b.lastName}`.toLowerCase()
    const comparison = nameA.localeCompare(nameB)
    return sortOrder.value === 'asc' ? comparison : -comparison
  })
})

// Quick stats computed properties
const totalCustomers = computed(() => customers.value.length)
const loyalCustomers = computed(() => 
  customers.value.filter(c => c.loyaltyStatus === 'Loyal').length
)
const totalVehicles = computed(() => 
  customers.value.reduce((sum, c) => sum + c.totalVehicles, 0)
)

const totalPages = computed(() => Math.ceil(filteredCustomers.value.length / itemsPerPage.value))

const paginatedCustomers = computed(() => {
  const start = (currentPage.value - 1) * itemsPerPage.value
  const end = start + itemsPerPage.value
  return filteredCustomers.value.slice(start, end)
})

// Smart pagination with ellipsis
const paginationRange = computed(() => {
  const pages: (number | string)[] = []
  const total = totalPages.value
  const current = currentPage.value

  if (total <= 7) {
    // Show all pages if 7 or fewer
    for (let i = 1; i <= total; i++) {
      pages.push(i)
    }
  } else {
    // Always show first page
    pages.push(1)

    if (current > 3) {
      pages.push('...')
    }

    // Show pages around current page
    const start = Math.max(2, current - 1)
    const end = Math.min(total - 1, current + 1)

    for (let i = start; i <= end; i++) {
      pages.push(i)
    }

    if (current < total - 2) {
      pages.push('...')
    }

    // Always show last page
    pages.push(total)
  }

  return pages
})

const goToPage = (page: number | string) => {
  if (typeof page === 'number' && page >= 1 && page <= totalPages.value) {
    currentPage.value = page
  }
}

const previousPage = () => {
  if (currentPage.value > 1) {
    currentPage.value--
  }
}

const nextPage = () => {
  if (currentPage.value < totalPages.value) {
    currentPage.value++
  }
}

const viewProfile = (id: string) => {
  router.push({ path: `/dashboard/customers/${id}` })
}

// Helper function to format customer full name
const getCustomerFullName = (customer: Customer) => {
  return `${customer.firstName} ${customer.middleName ? customer.middleName + ' ' : ''}${customer.lastName}${customer.suffix ? ' ' + customer.suffix : ''}`.trim()
}

// Refresh customers list
const refreshCustomers = () => {
  fetchCustomers()
}

// Multi-select functionality
const selectAllChecked = ref<boolean | 'indeterminate'>(false)

const isAllSelected = computed(() => {
  if (paginatedCustomers.value.length === 0) return false
  return paginatedCustomers.value.every(customer => 
    selectedCustomerIds.value.includes(customer.id)
  )
})

const isIndeterminate = computed(() => {
  const selectedCount = paginatedCustomers.value.filter(customer => 
    selectedCustomerIds.value.includes(customer.id)
  ).length
  return selectedCount > 0 && selectedCount < paginatedCustomers.value.length
})

// Click handlers for checkboxes
const handleSelectAllClick = () => {
  console.log('Select all clicked!')
  console.log('Current isAllSelected:', isAllSelected.value)
  console.log('paginatedCustomers:', paginatedCustomers.value)
  
  if (isAllSelected.value) {
    // Deselect all on current page
    const pageIds = paginatedCustomers.value.map(c => c.id)
    selectedCustomerIds.value = selectedCustomerIds.value.filter(id => !pageIds.includes(id))
    console.log('Deselected all, new selection:', selectedCustomerIds.value)
  } else {
    // Select all on current page
    const newIds = paginatedCustomers.value
      .filter(customer => !selectedCustomerIds.value.includes(customer.id))
      .map(customer => customer.id)
    selectedCustomerIds.value = [...selectedCustomerIds.value, ...newIds]
    console.log('Selected all, new selection:', selectedCustomerIds.value)
    console.log('Array length:', selectedCustomerIds.value.length)
    console.log('Array contents:', JSON.stringify(selectedCustomerIds.value))
  }
}

const handleCustomerCheckClick = (customerId: string) => {
  console.log('Customer checkbox clicked:', customerId)
  console.log('Current selection:', selectedCustomerIds.value)
  
  if (selectedCustomerIds.value.includes(customerId)) {
    selectedCustomerIds.value = selectedCustomerIds.value.filter(id => id !== customerId)
    console.log('Removed from selection:', selectedCustomerIds.value)
  } else {
    selectedCustomerIds.value = [...selectedCustomerIds.value, customerId]
    console.log('Added to selection:', selectedCustomerIds.value)
  }
}

// Create v-model compatible computed for select all
const selectAllModel = computed({
  get: () => isAllSelected.value,
  set: (value: boolean | 'indeterminate') => {
    if (value === true) {
      const newIds = paginatedCustomers.value
        .filter(customer => !selectedCustomerIds.value.includes(customer.id))
        .map(customer => customer.id)
      selectedCustomerIds.value = [...selectedCustomerIds.value, ...newIds]
    } else {
      const pageIds = paginatedCustomers.value.map(c => c.id)
      selectedCustomerIds.value = selectedCustomerIds.value.filter(id => !pageIds.includes(id))
    }
  }
})

// Create v-model compatible computed for individual customer
const getCustomerModel = (customerId: string) => {
  return computed({
    get: () => selectedCustomerIds.value.includes(customerId),
    set: (value: boolean | 'indeterminate') => {
      if (value === true) {
        if (!selectedCustomerIds.value.includes(customerId)) {
          selectedCustomerIds.value = [...selectedCustomerIds.value, customerId]
        }
      } else {
        selectedCustomerIds.value = selectedCustomerIds.value.filter(id => id !== customerId)
      }
    }
  })
}

const clearSelection = () => {
  selectedCustomerIds.value = []
}

const selectedCount = computed(() => selectedCustomerIds.value.length)

// Delete functions
const openDeleteDialog = () => {
  showDeleteDialog.value = true
}

const closeDeleteDialog = () => {
  showDeleteDialog.value = false
}

const handleDeleteSelected = async () => {
  if (selectedCustomerIds.value.length === 0) {
    toast.error('No customers selected')
    return
  }

  isDeleting.value = true
  let successCount = 0
  let errorCount = 0

  try {
    // Delete each customer one by one
    for (const customerId of selectedCustomerIds.value) {
      try {
        await deleteCustomer(customerId)
        successCount++
      } catch (error) {
        console.error(`Failed to delete customer ${customerId}:`, error)
        errorCount++
      }
    }

    // Show result toast
    if (successCount > 0 && errorCount === 0) {
      toast.success(`Successfully deleted ${successCount} customer${successCount > 1 ? 's' : ''}`)
    } else if (successCount > 0 && errorCount > 0) {
      toast.warning(`Deleted ${successCount} customer${successCount > 1 ? 's' : ''}, but ${errorCount} failed`)
    } else {
      toast.error('Failed to delete customers')
    }

    // Refresh the customer list
    await fetchCustomers()
    
    // Clear selection
    clearSelection()
    
    // Close dialog
    closeDeleteDialog()
  } catch (error) {
    console.error('Error during bulk delete:', error)
    toast.error('An error occurred while deleting customers')
  } finally {
    isDeleting.value = false
  }
}

// Clear selection when changing pages, filters, or search
watch([currentPage, loyaltyFilter, debouncedSearchQuery], () => {
  clearSelection()
})

</script>

<template>
  <div class="space-y-6">
    <header class="space-y-2">
      <h1 class="text-3xl font-bold tracking-tight">Customer Directory</h1>
      <p class="text-muted-foreground">
        Search, sort, and browse customers at a glance.
      </p>
    </header>

    <!-- Quick Stats Cards -->
    <div class="grid gap-4 md:grid-cols-3">
      <Card>
        <CardHeader class="flex flex-row items-center justify-between space-y-0 pb-2">
          <CardTitle class="text-sm font-medium">Total Customers</CardTitle>
          <Users class="h-4 w-4 text-muted-foreground" />
        </CardHeader>
        <CardContent>
          <div class="text-2xl font-bold">{{ totalCustomers }}</div>
          <p class="text-xs text-muted-foreground">All registered customers</p>
        </CardContent>
      </Card>

      <Card>
        <CardHeader class="flex flex-row items-center justify-between space-y-0 pb-2">
          <CardTitle class="text-sm font-medium">Loyal Customers</CardTitle>
          <Star class="h-4 w-4 text-amber-500" />
        </CardHeader>
        <CardContent>
          <div class="text-2xl font-bold text-amber-500">{{ loyalCustomers }}</div>
          <p class="text-xs text-muted-foreground">Premium tier members</p>
        </CardContent>
      </Card>

      <Card>
        <CardHeader class="flex flex-row items-center justify-between space-y-0 pb-2">
          <CardTitle class="text-sm font-medium">Total Vehicles</CardTitle>
          <Car class="h-4 w-4 text-muted-foreground" />
        </CardHeader>
        <CardContent>
          <div class="text-2xl font-bold">{{ totalVehicles }}</div>
          <p class="text-xs text-muted-foreground">Across all customers</p>
        </CardContent>
      </Card>
    </div>

    <section class="flex flex-col gap-4 md:flex-row md:items-center md:justify-between">
      <div class="relative w-full md:max-w-2xl">
        <Search class="absolute left-3 top-1/2 h-4 w-4 -translate-y-1/2 text-muted-foreground" />
        <Input
          v-model="searchQuery"
          placeholder="Search name, phone, email, loyalty, vehicles"
          class="pl-10"
        />
      </div>
      <div class="flex flex-col items-stretch gap-2 sm:flex-row md:w-auto">
        <Button asChild variant="primary" class="sm:w-[180px]">
          <RouterLink :to="{ name: 'add-customer' }">
            <Plus class="mr-2 h-4 w-4" />
            Add Customer
          </RouterLink>
        </Button>
        <Select v-model="loyaltyFilter">
          <SelectTrigger class="sm:w-[160px]">
            <SelectValue placeholder="Loyalty Status" />
          </SelectTrigger>
          <SelectContent>
            <SelectItem value="all">All Status</SelectItem>
            <SelectItem value="Loyal">Loyal</SelectItem>
            <SelectItem value="Regular">Regular</SelectItem>
            <SelectItem value="VIP">VIP</SelectItem>
          </SelectContent>
        </Select>
        <Select v-model="sortOrder">
          <SelectTrigger class="sm:w-[180px]">
            <SelectValue placeholder="Sort by" />
          </SelectTrigger>
          <SelectContent>
            <SelectItem value="asc">Name (A → Z)</SelectItem>
            <SelectItem value="desc">Name (Z → A)</SelectItem>
          </SelectContent>
        </Select>
        <Select v-model="itemsPerPage">
          <SelectTrigger class="sm:w-[120px]">
            <SelectValue placeholder="Per page" />
          </SelectTrigger>
          <SelectContent>
            <SelectItem :value="10">10 / page</SelectItem>
            <SelectItem :value="25">25 / page</SelectItem>
            <SelectItem :value="50">50 / page</SelectItem>
            <SelectItem :value="100">100 / page</SelectItem>
          </SelectContent>
        </Select>
      </div>
    </section>

    <!-- Bulk Actions Toolbar -->
    <section v-if="selectedCount > 0" class="flex items-center justify-between rounded-lg border border-primary bg-primary/10 p-4">
      <div class="flex items-center gap-3">
        <Checkbox :checked="true" disabled class="pointer-events-none" />
        <span class="text-sm font-medium">
          {{ selectedCount }} {{ selectedCount === 1 ? 'customer' : 'customers' }} selected
        </span>
      </div>
      <div class="flex items-center gap-2">
        <Button
          variant="ghost"
          size="sm"
          @click="clearSelection"
        >
          <X class="mr-2 h-4 w-4" />
          Clear Selection
        </Button>
        <Button
          variant="destructive"
          size="sm"
          @click="openDeleteDialog"
        >
          <Trash2 class="mr-2 h-4 w-4" />
          Delete Selected
        </Button>
      </div>
    </section>

    <section class="overflow-hidden rounded-xl border border-border bg-card shadow-lg">
      <Table class="text-base">
        <TableHeader>
          <TableRow>
            <TableHead class="h-12 w-12 px-4">
              <Checkbox v-model="selectAllModel" />
            </TableHead>
            <TableHead class="h-12 px-4 text-base">Customer ID</TableHead>
            <TableHead class="h-12 px-4 text-base">Name</TableHead>
            <TableHead class="h-12 px-4 text-base">Phone Number</TableHead>
            <TableHead class="h-12 px-4 text-base">Email Address</TableHead>
            <TableHead class="h-12 px-4 text-base">Loyalty Status</TableHead>
            <TableHead class="h-12 px-4 text-right text-base">Total Vehicles</TableHead>
            <TableHead class="h-12 px-4 text-right text-base">Action</TableHead>
          </TableRow>
        </TableHeader>
        
        <!-- Loading State -->
        <TableBody v-if="isLoading">
          <TableRow v-for="i in itemsPerPage" :key="`skeleton-${i}`">
            <TableCell class="p-4"><Skeleton class="h-4 w-4" /></TableCell>
            <TableCell class="p-4"><Skeleton class="h-5 w-20" /></TableCell>
            <TableCell class="p-4"><Skeleton class="h-5 w-32" /></TableCell>
            <TableCell class="p-4"><Skeleton class="h-5 w-28" /></TableCell>
            <TableCell class="p-4"><Skeleton class="h-5 w-40" /></TableCell>
            <TableCell class="p-4"><Skeleton class="h-6 w-16" /></TableCell>
            <TableCell class="p-4 text-right"><Skeleton class="ml-auto h-5 w-8" /></TableCell>
            <TableCell class="p-4 text-right"><Skeleton class="ml-auto h-8 w-24" /></TableCell>
          </TableRow>
        </TableBody>

        <!-- Data Rows -->
        <TableBody v-else-if="paginatedCustomers.length">
          <TableRow
            v-for="customer in paginatedCustomers"
            :key="customer.id"
            class="hover:bg-muted/50"
          >
            <TableCell class="p-4">
              <Checkbox v-model="getCustomerModel(customer.id).value" />
            </TableCell>
            <TableCell class="p-4 font-medium">{{ customer.id }}</TableCell>
            <TableCell class="p-4 font-medium">{{ getCustomerFullName(customer) }}</TableCell>
            <TableCell class="p-4">{{ customer.phoneNumber }}</TableCell>
            <TableCell class="p-4">{{ customer.email }}</TableCell>
            <TableCell class="p-4">
              <Badge
                v-if="customer.loyaltyStatus === 'Loyal'"
                class="bg-gradient-to-r from-amber-500 to-yellow-500 text-white hover:from-amber-600 hover:to-yellow-600"
              >
                <Star class="mr-1 h-3 w-3 fill-current" />
                Loyal
              </Badge>
              <Badge
                v-else
                variant="outline"
                class="capitalize"
              >
                {{ customer.loyaltyStatus }}
              </Badge>
            </TableCell>
            <TableCell class="p-4 text-right">{{ customer.totalVehicles }}</TableCell>
            <TableCell class="p-4 text-right">
              <Button
                type="button"
                variant="outline"
                size="sm"
                @click="viewProfile(customer.id)"
              >
                View Profile
              </Button>
            </TableCell>
          </TableRow>
        </TableBody>

        <!-- Empty State -->
        <TableBody v-else>
          <TableRow>
            <TableCell colspan="8" class="p-12">
              <div class="flex flex-col items-center justify-center text-center">
                <Users class="mb-4 h-16 w-16 text-muted-foreground/40" />
                <h3 class="mb-2 text-lg font-semibold">No customers found</h3>
                <p class="mb-4 text-sm text-muted-foreground">
                  {{ searchQuery ? 'Try adjusting your search filters' : 'Get started by adding your first customer' }}
                </p>
                <Button
                  v-if="!searchQuery"
                  asChild
                  variant="primary"
                  size="sm"
                >
                  <RouterLink :to="{ name: 'add-customer' }">
                    <Plus class="mr-2 h-4 w-4" />
                    Add Customer
                  </RouterLink>
                </Button>
              </div>
            </TableCell>
          </TableRow>
        </TableBody>
      </Table>
    </section>

    <!-- Pagination Controls -->
    <section v-if="!isLoading && filteredCustomers.length > 0" class="flex items-center justify-between px-2">
      <div class="text-sm text-muted-foreground">
        Showing {{ (currentPage - 1) * itemsPerPage + 1 }} to 
        {{ Math.min(currentPage * itemsPerPage, filteredCustomers.length) }} of 
        {{ filteredCustomers.length }} customers
      </div>
      <div class="flex items-center gap-2">
        <Button
          variant="outline"
          size="sm"
          :disabled="currentPage === 1"
          @click="previousPage"
        >
          <ChevronLeft class="h-4 w-4" />
          Previous
        </Button>
        
        <div class="flex items-center gap-1">
          <Button
            v-for="(page, index) in paginationRange"
            :key="`page-${index}`"
            variant="outline"
            size="sm"
            :class="[
              'min-w-[40px]',
              currentPage === page ? 'bg-primary text-primary-foreground hover:bg-primary/90 hover:text-primary-foreground' : '',
              page === '...' ? 'pointer-events-none' : ''
            ]"
            :disabled="page === '...'"
            @click="goToPage(page)"
          >
            {{ page }}
          </Button>
        </div>

        <Button
          variant="outline"
          size="sm"
          :disabled="currentPage === totalPages"
          @click="nextPage"
        >
          Next
          <ChevronRight class="h-4 w-4" />
        </Button>
      </div>
    </section>
  </div>

  <!-- Delete Confirmation Dialog -->
  <Dialog v-model:open="showDeleteDialog">
    <DialogContent class="sm:max-w-md">
      <DialogHeader>
        <div class="flex items-center gap-3">
          <div class="flex h-10 w-10 items-center justify-center rounded-full bg-destructive/10">
            <AlertTriangle class="h-5 w-5 text-destructive" />
          </div>
          <div>
            <DialogTitle class="text-xl">Delete Customers</DialogTitle>
            <DialogDescription class="mt-1">
              This action cannot be undone
            </DialogDescription>
          </div>
        </div>
      </DialogHeader>
      
      <div class="my-4 rounded-lg border border-border bg-muted/50 p-4">
        <p class="text-sm text-muted-foreground">
          You are about to permanently delete 
          <span class="font-semibold text-foreground">{{ selectedCount }} customer{{ selectedCount > 1 ? 's' : '' }}</span>.
        </p>
        <p class="mt-2 text-sm text-muted-foreground">
          All associated data including vehicles and service history will also be removed.
        </p>
      </div>

      <DialogFooter class="gap-2 sm:gap-0">
        <Button
          variant="outline"
          @click="closeDeleteDialog"
          :disabled="isDeleting"
          class="mr-2"
        >
          Cancel
        </Button>
        <Button
          variant="destructive"
          @click="handleDeleteSelected"
          :disabled="isDeleting"
        >
          <Trash2 class="mr-2 h-4 w-4" />
          {{ isDeleting ? 'Deleting...' : 'Delete Customers' }}
        </Button>
      </DialogFooter>
    </DialogContent>
  </Dialog>
</template>