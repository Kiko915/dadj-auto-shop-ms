// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url  	    = env("DATABASE_URL")
  // uncomment next line if you use Prisma <5.10
  // directUrl = env("DATABASE_URL_UNPOOLED")
}

model User {
  id            String   @id @default(cuid())
  email         String   @unique
  name          String?
  password      String
  role          String   @default("user") // user, admin, mechanic
  isActive      Boolean  @default(true)
  profilePicture String? // URL or path to profile picture
  
  // Address fields
  region        String?
  province      String?
  city          String?
  barangay      String?
  street        String?
  country       String   @default("Philippines")
  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  passwordResets PasswordReset[]
  sessions       UserSession[]

  @@map("users")
}

model PasswordReset {
  id        String   @id @default(cuid())
  email     String
  token     String   @unique
  expiresAt DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())
  
  // Relations
  user      User     @relation(fields: [email], references: [email])

  @@map("password_resets")
}

model UserSession {
  id           String   @id @default(cuid())
  userId       String
  token        String   @unique
  deviceInfo   String?  // e.g., "Windows 10"
  browser      String?  // e.g., "Chrome 120"
  ipAddress    String?
  userAgent    String?
  location     String?  // e.g., "Philippines"
  lastActivity DateTime @default(now())
  expiresAt    DateTime
  createdAt    DateTime @default(now())
  
  // Relations
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([token])
  @@map("user_sessions")
}

model Customer {
  id            String   @id @default(cuid()) @map("customer_id")
  firstName     String   @map("first_name")
  lastName      String   @map("last_name")
  middleName    String?  @map("middle_name")
  suffix        String?
  phoneNumber   String   @map("phone_number")
  email         String?  @unique
  profilePicture String? @map("profile_picture") // ImageKit URL
  notes         String?  @db.Text
  isActive      Boolean  @default(true) @map("is_active")
  loyaltyStatus String   @default("regular") @map("loyalty_status") // regular, silver, gold, platinum
  totalVehicles Int      @default(0) @map("total_vehicles")
  serviceCount  Int      @default(0) @map("service_count")
  totalSpent    Decimal  @default(0) @db.Decimal(10, 2) @map("total_spent")
  
  dateCreated   DateTime @default(now()) @map("date_created")
  lastModified  DateTime @updatedAt @map("last_modified")

  // Relations
  vehicles      Vehicle[]

  @@map("customers")
}

enum VehicleType {
  Sedan
  SUV
  Truck
  Van
  Tricycle
  Motorcycle
  Jeepney

}

model Vehicle {
  id            String       @id @default(cuid()) @map("vehicle_id")
  customerId    String       @map("customer_id")
  licensePlate  String       @unique @map("license_plate") @db.VarChar(20)
  make          String       @db.VarChar(100)
  model         String       @db.VarChar(100)
  year          Int?
  vin           String?      @unique @db.VarChar(17)
  mileage       Int?
  vehicleType   VehicleType? @map("vehicle_type")
  notes         String?      @db.Text
  dateRegistered DateTime    @default(now()) @map("date_registered")
  
  // Relations
  customer      Customer     @relation(fields: [customerId], references: [id], onDelete: Cascade)

  @@index([customerId])
  @@map("vehicles")
}
